# Junqo Project
# This file contains the implemented schema for the Junqo API
# Please read the `README.md` file before making any changes
# Operations

# Every operation in the API needs authentication, except for the `signUp` and `signIn` operations.
# To authenticate, the user must provide a valid JWT token in the `Authorization` header.
# The token must be in the format `Bearer <token>`.

# Main Operations

"""
The `Query` type represents all of the entry points into the API.
"""
type Query {
  """
  Get every users in the system.
  TODO: Consider implementing pagination for large datasets.
  """
  users: [User!]!

  """
  Get a user by their ID.
  Returns null if the user is not found.
  """
  user(id: ID!): User

  """
  Returns true if the user is logged in, false otherwise.
  """
  isLoggedIn: Boolean!

  """
  Get the profile of a student by their user ID.
  """
  studentProfile(userId: ID!): StudentProfile

  """
  Get every offers in the system.
  """
  offers: [Offer!]

  """
  Get an offer by its ID.
  """
  offer(offerId: ID!): Offer

  """
  Get every applications to a user's offers.
  """
  userOfferApplications(userId: ID!): [OfferApplication!]

  """
  Get every applications to a specific offer.
  """
  offerApplications(offerId: ID!): [OfferApplication!]
}

"""
The `Mutation` type represents all of the mutations that the API can perform.
"""
type Mutation {
  """
  Update a user by their ID.
  """
  updateUser(
    "The unique identifier of the user."
    id: ID!,
    "The type of the user out of (STUDENT, SCHOOL, COMPANY)."
    type: UserType
    "The name must not contain spaces."
    name: String
    "The email of the user."
    email: Email
    "The password must be at least 8 characters long."
    password: String
  ): User!

  """
  Delete a user by their ID.
  """
  deleteUser(id: ID!): Boolean!

  """
  (Public) Sign up a new user, creating a new account in the database.
  """
  signUp(
    "The type of the user out of (STUDENT, SCHOOL, COMPANY)."
    type: UserType!
    "The name of the user."
    name: String!
    "The email of the user."
    email: Email!
    "The password of the user."
    password: String!
  ): AuthPayload!

  """
  (Public) Sign in an existing user.
  """
  signIn(email: Email!, password: String!): AuthPayload!

  """
  Update the current student user profile.
  """
  updateStudentProfile(studentProfileInput: StudentProfileInput!): StudentProfile!

  """
  Create a new offer.
  """
  createOffer(offerInput: CreateOfferInput): Offer!

  """
  Update an existing offer.
  """
  updateOffer(offerId: ID!, offerInput: UpdateOfferInput!): Offer!

  """
  Delete an existing offer.
  """
  deleteOffer(offerId: ID!) : Boolean!

  """
  Apply to an offer.
  """
  applyToOffer(offerId: ID!): OfferApplication!
}

# Custom Scalars

"""
The `Email` scalar type represents E-Mail addresses compliant with the RFC 5322 standard.
"""
scalar Email

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z,
compliant with the `date-time` format outlined in section 5.6 of RFC 3339.
"""
scalar DateTime

# Enums

"""
The `UserType` enum represents the situation of the user.
"""
enum UserType {
  "The user is a student."
  STUDENT
  "The user is a school."
  SCHOOL
  "The user is a company."
  COMPANY
  "The user is an admin."
  ADMIN
}

"""
The `OfferStatus` enum represents the status of an offer.
"""
enum OfferStatus {
  "The offer is active."
  ACTIVE
  "The offer is inactive."
  INACTIVE
  "The offer is deleted."
  DELETED
}

# Main Types

"""
The `User` type represents a user in the system.
"""
# Main Types
type User {
  "The unique identifier of the user."
  id: ID!
  "The type of the user out of (STUDENT, SCHOOL, COMPANY)."
  type: UserType!
  "The name of the user (without spaces)."
  name: String!
  "The email of the user."
  email: Email!
}

"""
The `Experience` type represents an experience in a company done by a student.
"""
type Experience {
  "The title of the experience."
  title: String!
  "The company where the experience was done."
  company: String!
  "The start date of the experience."
  startDate: DateTime!
  "The end date of the experience if it's finished."
  endDate: DateTime
  "The description of the experience."
  description: String
  "The skills obtained during the experience."
  skills: [String!]
}

"""
The `StudentProfile` type represents the profile of a student.
"""
type StudentProfile {
  "The unique identifier of the user that own the profile."
  userId: ID!
  "The name of the student."
  name: String!
  "The avatar picture url of the student."
  avatar: String
  "The skills of the student."
  skills: [String!]
  "The experience of the student."
  experience: [Experience!]
}

"""
The `Offer` type represents an offer in the system.
"""
type Offer {
  "The unique identifier of the offer."
  id: ID!
  "The user that created the offer."
  userId: ID!
  "The date when the offer was created."
  createdAt: DateTime!
  "The date when the offer was last updated."
  updatedAt: DateTime!
  "The date when the offer was deleted."
  deletedAt: DateTime
  "The title of the offer."
  title: String!
  "The description of the offer."
  description: String!
  "The status of the offer."
  status: OfferStatus!
  "The date when the offer expires."
  expiresAt: DateTime
  "The number of views of the offer."
  viewCount: Int!
  "The type of offer (Stage or Alternance)."
  offerType: String!
  "The duration of the offer."
  duration: String!
  "The salary offered."
  salary: String!
  "The location type (Sur place or Distanciel)."
  workLocationType: String!
  "The required skills for this position."
  skills: [String!]
  "The benefits offered with the position."
  benefits: [String!]
  "The required education level."
  educationLevel: String!
}

"""
The `OfferApplication` type represents an application to an offer.
"""
type OfferApplication {
  "The unique identifier of the application."
  id: ID!
  "The date when the application was created."
  createdAt: DateTime!
  "The offer that the application is for."
  offer: Offer!
  "The student that applied to the offer."
  applying: StudentProfile!
}

# Inputs

"""
The `CreateOfferInput` input type is used to create an offer.
"""
input CreateOfferInput {
  "The user that created the offer."
  userId: ID!
  "The title of the offer."
  title: String!
  "The description of the offer."
  description: String!
  "The status of the offer."
  status: OfferStatus!
  "The date when the offer expires."
  expiresAt: DateTime
  "The number of views of the offer."
  viewCount: Int!
  "The type of offer (Stage or Alternance)."
  offerType: String!
  "The duration of the offer."
  duration: String!
  "The salary offered."
  salary: String!
  "The location type (Sur place or Distanciel)."
  workLocationType: String!
  "The required skills for this position."
  skills: [String!]
  "The benefits offered with the position."
  benefits: [String!]
  "The required education level."
  educationLevel: String!
}

"""
The `UpdateOfferInput` input type is used to update an offer.
"""
input UpdateOfferInput {
  "The title of the offer."
  title: String
  "The description of the offer."
  description: String
  "The status of the offer."
  status: OfferStatus
  "The date when the offer expires."
  expiresAt: DateTime
  "The category of the offer."
  category: String
  "The tags of the offer."
  tags: [String!]
}

"""
The `StudentProfileInput` input type is used to update a student profile.
"""
input StudentProfileInput {
  "The avatar picture url of the student."
  avatar: String
  "The skills of the student."
  skills: [String!]
  "The experiences of the student."
  experience: [ExperienceInput!]
}

"""
The `ExperienceInput` input type is used to create or update an experience.
"""
input ExperienceInput {
  "The title of the experience."
  title: String!
  "The company where the experience was done."
  company: String!
  "The start date of the experience."
  startDate: DateTime!
  "The end date of the experience if it's finished."
  endDate: DateTime
  "The description of the experience."
  description: String
  "The skills obtained during the experience."
  skills: [String!]
}

# Outputs

"""
The `AuthPayload` output type is used to return the token and user after signing in.
"""
type AuthPayload {
  "The JWT of the user, used for authentication."
  token: String!
  "The user object associated with the authenticated token."
  user: User!
}
