# Project: junqo
# Description: Dockerfile for the production environment of the front-end application.

# Stage 1 - Install dependencies and build the app in a build environment
FROM debian:bullseye AS build-env

ARG FLUTTER_VERSION=3.22.2

ENV GRAPHQL_SCHEMAS_PATH=/home/app/schemas/**/*.graphql

# Install flutter dependencies
RUN apt-get update && apt-get install -y \
    curl \
    git \
    wget \
    unzip \
    xz-utils \
    libgconf-2-4 \
    gdb \
    libstdc++6 \
    libglu1-mesa \
    fonts-droid-fallback \
    lib32stdc++6 \
    python3 \
    sed \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# See https://docs.flutter.dev/release/archive to change the version
WORKDIR /usr/local/
ENV PATH="/usr/local/src/flutter/bin:${PATH}"
ADD https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${FLUTTER_VERSION}-stable.tar.xz  .
RUN tar -xf flutter_linux_${FLUTTER_VERSION}-stable.tar.xz -C src && \
    rm flutter_linux_${FLUTTER_VERSION}-stable.tar.xz && \
    git config --global --add safe.directory /usr/local/src/flutter && \
    flutter doctor -v

# Copy files to container and build
WORKDIR /home/app/junqo_front
COPY ./junqo_front/ .
COPY ./schemas ./lib/schemas/

# Generate graphql types
RUN dart run build_runner build --delete-conflicting-outputs

# Build the app
RUN flutter build web --release

# Clean up unnecessary files to reduce image size
RUN rm -rf /usr/local/src/flutter

# Stage 2 - Create the run-time image
FROM nginx:1.21.1-alpine

HEALTHCHECK --interval=5s --timeout=5s --start-period=5s --retries=5 \
    CMD curl -f http://localhost || exit 1

COPY  --from=build-env /home/app/junqo_front/build/web /usr/share/nginx/html
COPY  --chown=nginx:nginx ./junqo_front/nginx.conf /etc/nginx/nginx.conf
RUN test -f /etc/nginx/nginx.conf || (echo "Nginx config not found" && exit 1) && chmod 644 /etc/nginx/nginx.conf

EXPOSE 80
